{"version":3,"sources":["assets/monks.jpg","assets/logo.svg","constants.js","helpers.js","reducers/rootReducer.js","reducers/mainReducer.js","piece.js","actions/actions.js","selectors/index.js","info.js","app.js","serviceWorker.js","index.js","store.js"],"names":["module","exports","__webpack_require__","p","initialOrder","a","console","log","i","length","j","Math","floor","random","_ref","shuffle","Array","apply","columns","map","Number","call","CONSTANTS","PUZZLE_SIZE","COLUMNS","INITIAL_ORDER","SCORE","SLIDE","INCREASE_TIME","END_GAME","CHEAT","combineReducers","mainReducer","state","arguments","undefined","order","moves","time","score","gameOver","action","type","slice","index","payload","pos","newPos","Object","objectSpread","Piece","_this$props","this","props","slide","_this","_this$props2","size","offsetY","offsetX","top","left","react_default","createElement","react","className","onClick","attemptSlide","style","width","height","concat","backgroundPosition","PureComponent","mapDispatchToProps","dispatch","connect","getEmptyTileIndex","createSelector","items","indexOf","Info","newProps","interval","setInterval","increaseTime","arr","consecutive","clearInterval","endGame","cheat","emptyTileIndex","minutes","seconds","src","Logo","alt","Monks","PIECE_SIZE","App","src_piece","key","renderPieces","src_info","href","_ref$mainReducer","Boolean","window","location","hostname","match","ReactDOM","render","es","store","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","configureStore","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad5d14a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monks.addcee8c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.61cb01d2.svg\";","import { shuffle } from './helpers';\n\nconst columns = 4;\n\n// Create an array of shuffled numbers to represent the order of the pieces in the puzzle\nconst lastPiece = (columns * columns) - 1;\nconst initialOrder = shuffle(Array.apply(null, {length: lastPiece}).map(Number.call, Number));\ninitialOrder[lastPiece] = null; // make the last piece always empty\n\nconst CONSTANTS = {\n  PUZZLE_SIZE: 500,\n  COLUMNS: columns,\n  INITIAL_ORDER: initialOrder,\n  SCORE: 1200000,\n\n  // Redux actions\n  SLIDE: 'SLIDE',\n  INCREASE_TIME: 'INCREASE_TIME',\n  END_GAME: 'END_GAME',\n  CHEAT: 'CHEAT'\n};\n\nexport default CONSTANTS;\n","/**\n * Shuffles the numbers in the array\n * @param {Array}\n */\nexport const shuffle = (a) => {\n  console.log('shuffle');\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\n/**\n * Returns true if the numbers in the array are consecutive or false if not\n * @param {Array}\n */\nexport const consecutive = (arr) => {\n  console.log('check end game');\n  for (let i = 1; i < arr.length; i += 1) {\n    if (i !== arr.length - 1 && (arr[i] === null || arr[i - 1] === null || arr[i] < arr[i - 1])) return false;\n  }\n  return true;\n}\n","import { combineReducers } from 'redux';\nimport mainReducer from './mainReducer';\n\nexport default combineReducers({\n  mainReducer\n});\n","import CONSTANTS from '../constants';\n\nexport default (state = {\n  order: CONSTANTS.INITIAL_ORDER,\n  moves: 0,\n  time: 0,\n  score: CONSTANTS.SCORE,\n  gameOver: false\n}, action) => {\n  switch (action.type) {\n    case CONSTANTS.SLIDE: {\n      // Switch tiles' positions\n      const order = state.order.slice();\n      const index = order[action.payload.pos];\n      order[action.payload.pos] = null;\n      order[action.payload.newPos] = index;\n\n      // Increase moves\n      const moves = state.moves + 1;\n\n      return { ...state, order, moves };\n    }\n    case CONSTANTS.INCREASE_TIME: {\n      let score = state.score - (1 + (state.moves ? state.moves : 0));\n      score = score > 0 ? score : 0;\n      return { ...state, time: action.payload, score };\n    }\n    case CONSTANTS.END_GAME: {\n      return { ...state, gameOver: true }\n    }\n    case CONSTANTS.CHEAT: {\n      const order = Array.apply(null, {length: (CONSTANTS.COLUMNS * CONSTANTS.COLUMNS) - 1}).map(Number.call, Number);\n      order[14] = null;\n      order[15] = 14;\n      return { ...state, order };\n    }\n    default: return state\n  }\n}\n","import React, { PureComponent, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport CONSTANTS from './constants';\nimport { slide } from './actions/actions';\nimport './styles/piece.css';\n\nclass Piece extends PureComponent {\n  attemptSlide(pos) {\n    const { order, slide } = this.props;\n    let newPos = null;\n\n    if (order[pos + 1] === null) {\n      // console.log('Can move right');\n      newPos = pos + 1;\n    } else if (order[pos - 1] === null) {\n      // console.log('Can move left');\n      newPos = pos - 1;\n    } else if (order[pos + CONSTANTS.COLUMNS] === null) {\n      // console.log('Can move down');\n      newPos = pos + CONSTANTS.COLUMNS;\n    } else if (order[pos - CONSTANTS.COLUMNS] === null) {\n      // console.log('Can move up');\n      newPos = pos - CONSTANTS.COLUMNS;\n    }\n\n    if (newPos !== null) slide({ pos, newPos });\n  }\n\n  render() {\n    const {\n      index,\n      pos,\n      size,\n      offsetY,\n      offsetX,\n      top,\n      left\n    } = this.props;\n\n    return (<Fragment>\n      <div\n        className=\"piece\"\n        onClick={() => this.attemptSlide(pos)}\n        style={{\n          width: size,\n          height: size,\n          top: `${top}px`,\n          left: `${size * left}px`,\n          backgroundPosition: `-${offsetY * size}px -${offsetX}px`\n        }}\n      >\n        <span>{index}</span>\n      </div>\n    </Fragment>);\n  }\n}\n\nconst mapDispatchToProps = {\n  slide\n};\n\nconst mapStateToProps = ({\n  mainReducer: {\n    order\n  }\n}) => ({\n  order\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Piece);\n","export const slide = (payload) => dispatch => {\n  dispatch({\n    type: 'SLIDE',\n    payload\n  })\n}\n\nexport const increaseTime = (time) => dispatch => {\n  dispatch({\n    type: 'INCREASE_TIME',\n    payload: time\n  })\n}\n\nexport const cheat = () => dispatch => {\n  dispatch({\n    type: 'CHEAT'\n  })\n}\n\nexport const endGame = () => dispatch => {\n  dispatch({\n    type: 'END_GAME'\n  })\n}\n","import { createSelector } from 'reselect';\n\nconst order = state => state.mainReducer.order;\n\n// Find the index of the empty tile in the grid\nexport const getEmptyTileIndex = createSelector(\n  order,\n  items => items.indexOf(null)\n)\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getEmptyTileIndex } from './selectors'\nimport { increaseTime, endGame, cheat } from './actions/actions';\nimport { consecutive } from './helpers';\nimport Monks from './assets/monks.jpg';\nimport Logo from './assets/logo.svg';\nimport './styles/info.css';\n\nclass Info extends PureComponent {\n  componentWillReceiveProps(newProps) {\n    // Start Timer in the first move\n    if (newProps.moves === 1 && newProps.time === 0) {\n      console.log('start time');\n      this.interval = setInterval(() => this.props.increaseTime(this.props.time + 1), 1000);\n    }\n\n    if (newProps.moves !== this.props.moves) {\n      // End game if all the tiles are in the right position\n      if (consecutive(newProps.order)) {\n        clearInterval(this.interval);\n        this.props.endGame();\n      }\n    }\n  }\n\n  render() {\n    const { moves, time, score, cheat, size, emptyTileIndex } = this.props;\n    const minutes = Math.floor(time / 60);\n    const seconds = time - minutes * 60;\n\n    return (\n      <div className=\"info\">\n        <img className=\"logo\" src={Logo} alt=\"MediaMonks\" />\n        <img className=\"preview\" src={Monks} alt=\"Preview\" width={size} height={size} />\n        <div className=\"details\">\n          <div className=\"empty\">Empty index: {emptyTileIndex}</div>\n          <div className=\"moves\">Moves: {moves}</div>\n          <div className=\"time\">Time: {minutes}m {seconds}s</div>\n          <div className=\"score\">Score: {score}</div>\n        </div>\n        <button className=\"cheat\" onClick={() => cheat()}>cheat ¯\\(°_o)/¯</button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  increaseTime,\n  cheat,\n  endGame\n};\n\nconst mapStateToProps = state => {\n  return {\n    order: state.mainReducer.order,\n    moves: state.mainReducer.moves,\n    score: state.mainReducer.score,\n    time: state.mainReducer.time,\n    emptyTileIndex: getEmptyTileIndex(state)\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Info);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Piece from './piece';\nimport Info from './info';\nimport CONSTANTS from './constants';\nimport './styles/app.css';\n\nconst PIECE_SIZE = CONSTANTS.PUZZLE_SIZE / CONSTANTS.COLUMNS;\n\nclass App extends PureComponent {\n  renderPieces() {\n    console.log('renderPieces');\n    const { order } = this.props;\n    let offsetX = 0;\n    let top = 0;\n\n    return order.map((index, i) => {\n      offsetX = Math.floor(index / CONSTANTS.COLUMNS) * PIECE_SIZE;\n      top = Math.floor(i / CONSTANTS.COLUMNS) * PIECE_SIZE;\n\n      if (index !== null) {\n        return (<Piece\n          size={PIECE_SIZE}\n          offsetX={offsetX}\n          offsetY={index % CONSTANTS.COLUMNS}\n          top={top}\n          left={i % CONSTANTS.COLUMNS}\n          index={index + 1}\n          pos={i}\n          key={`piece-${index}`}\n        />);\n      }\n      return null;\n    })\n  }\n\n  render() {\n    const { gameOver } = this.props;\n    return (\n      <div className=\"app\">\n        <div className={`puzzle ${gameOver ? 'game-over' : ''}`}>\n          {gameOver ? <div className=\"congrats\">Congratulations. You win! Thanks for playing</div> : this.renderPieces()}\n        </div>\n        <Info size={PIECE_SIZE} />\n        <footer className=\"footer\">Sliding puzzle test with React and Redux for <a href=\"http://mediamonks.com\">MediaMonks</a> by <a href=\"http://joanmira.com\">Joan Mira</a> (<a href=\"https://github.com/gazpachu/sliding-puzzle\">code</a>)</footer>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = null;\nconst mapStateToProps = ({\n  mainReducer: {\n    order,\n    gameOver\n  }\n}) => ({\n  order,\n  gameOver\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './styles/index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <Provider store={configureStore()}>\n  <App />\n </Provider>,\n document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore(initialState={}) {\n  return createStore(\n    rootReducer,\n    compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n  );\n}\n"],"sourceRoot":""}